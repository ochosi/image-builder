// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for Distributions.
const (
	Centos8  Distributions = "centos-8"
	Centos9  Distributions = "centos-9"
	Fedora35 Distributions = "fedora-35"
	Fedora36 Distributions = "fedora-36"
	Fedora37 Distributions = "fedora-37"
	Fedora38 Distributions = "fedora-38"
	Rhel8    Distributions = "rhel-8"
	Rhel84   Distributions = "rhel-84"
	Rhel85   Distributions = "rhel-85"
	Rhel86   Distributions = "rhel-86"
	Rhel87   Distributions = "rhel-87"
	Rhel88   Distributions = "rhel-88"
	Rhel9    Distributions = "rhel-9"
	Rhel90   Distributions = "rhel-90"
	Rhel91   Distributions = "rhel-91"
	Rhel92   Distributions = "rhel-92"
)

// Defines values for ImageRequestArchitecture.
const (
	Aarch64 ImageRequestArchitecture = "aarch64"
	X8664   ImageRequestArchitecture = "x86_64"
)

// Defines values for ImageStatusStatus.
const (
	ImageStatusStatusBuilding    ImageStatusStatus = "building"
	ImageStatusStatusFailure     ImageStatusStatus = "failure"
	ImageStatusStatusPending     ImageStatusStatus = "pending"
	ImageStatusStatusRegistering ImageStatusStatus = "registering"
	ImageStatusStatusSuccess     ImageStatusStatus = "success"
	ImageStatusStatusUploading   ImageStatusStatus = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAmi               ImageTypes = "ami"
	ImageTypesAws               ImageTypes = "aws"
	ImageTypesAzure             ImageTypes = "azure"
	ImageTypesEdgeCommit        ImageTypes = "edge-commit"
	ImageTypesEdgeInstaller     ImageTypes = "edge-installer"
	ImageTypesGcp               ImageTypes = "gcp"
	ImageTypesGuestImage        ImageTypes = "guest-image"
	ImageTypesImageInstaller    ImageTypes = "image-installer"
	ImageTypesRhelEdgeCommit    ImageTypes = "rhel-edge-commit"
	ImageTypesRhelEdgeInstaller ImageTypes = "rhel-edge-installer"
	ImageTypesVhd               ImageTypes = "vhd"
	ImageTypesVsphere           ImageTypes = "vsphere"
)

// Defines values for UploadStatusStatus.
const (
	UploadStatusStatusFailure UploadStatusStatus = "failure"
	UploadStatusStatusPending UploadStatusStatus = "pending"
	UploadStatusStatusRunning UploadStatusStatus = "running"
	UploadStatusStatusSuccess UploadStatusStatus = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws   UploadTypes = "aws"
	UploadTypesAwsS3 UploadTypes = "aws.s3"
	UploadTypesAzure UploadTypes = "azure"
	UploadTypesGcp   UploadTypes = "gcp"
)

// AWSEC2Clone defines model for AWSEC2Clone.
type AWSEC2Clone struct {
	// A region as described in
	// https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-regions
	Region string `json:"region"`

	// An array of AWS account IDs as described in
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/console_account-alias.html
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSS3UploadRequestOptions defines model for AWSS3UploadRequestOptions.
type AWSS3UploadRequestOptions = map[string]interface{}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AWSUploadRequestOptions defines model for AWSUploadRequestOptions.
type AWSUploadRequestOptions struct {
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
	ShareWithSources  *[]string `json:"share_with_sources,omitempty"`
}

// AWSUploadStatus defines model for AWSUploadStatus.
type AWSUploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// ArchitectureItem defines model for ArchitectureItem.
type ArchitectureItem struct {
	Arch       string   `json:"arch"`
	ImageTypes []string `json:"image_types"`

	// Base repositories for the given distribution and architecture.
	Repositories []Repository `json:"repositories"`
}

// Architectures defines model for Architectures.
type Architectures = []ArchitectureItem

// AzureUploadRequestOptions defines model for AzureUploadRequestOptions.
type AzureUploadRequestOptions struct {
	// Name of the created image.
	// Must begin with a letter or number, end with a letter, number or underscore, and may contain only letters, numbers, underscores, periods, or hyphens.
	// The total length is limited to 60 characters.
	ImageName *string `json:"image_name,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of the source that will be used to resolve the tenant and subscription IDs.
	// Do not provide a tenant_id or subscription_id when providing a source_id.
	SourceId *string `json:"source_id,omitempty"`

	// ID of subscription where the image should be uploaded.
	// When providing a subscription_id, also be sure to provide a tenant_id and do not include a source_id.
	SubscriptionId *string `json:"subscription_id,omitempty"`

	// ID of the tenant where the image should be uploaded. This link explains how
	// to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	// When providing a tenant_id, also be sure to provide a subscription_id and do not include a source_id.
	TenantId *string `json:"tenant_id,omitempty"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneRequest defines model for CloneRequest.
type CloneRequest interface{}

// CloneResponse defines model for CloneResponse.
type CloneResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ClonesResponse defines model for ClonesResponse.
type ClonesResponse struct {
	Data  []ClonesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ClonesResponseItem defines model for ClonesResponseItem.
type ClonesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	Request   interface{}        `json:"request"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   Distributions   `json:"distribution"`
	ImageName      *string         `json:"image_name,omitempty"`

	// Array of exactly one image request. Having more image requests in one compose is currently not supported.
	ImageRequests []ImageRequest `json:"image_requests"`
}

// ComposeResponse defines model for ComposeResponse.
type ComposeResponse struct {
	Id openapi_types.UUID `json:"id"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	ImageStatus ImageStatus    `json:"image_status"`
	Request     ComposeRequest `json:"request"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposesResponse defines model for ComposesResponse.
type ComposesResponse struct {
	Data  []ComposesResponseItem `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// ComposesResponseItem defines model for ComposesResponseItem.
type ComposesResponseItem struct {
	CreatedAt string             `json:"created_at"`
	Id        openapi_types.UUID `json:"id"`
	ImageName *string            `json:"image_name,omitempty"`
	Request   interface{}        `json:"request"`
}

// Repository configuration for custom repositories.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above. Id is required.
type CustomRepository struct {
	Baseurl      *[]string `json:"baseurl,omitempty"`
	CheckGpg     *bool     `json:"check_gpg,omitempty"`
	CheckRepoGpg *bool     `json:"check_repo_gpg,omitempty"`
	Enabled      *bool     `json:"enabled,omitempty"`
	Filename     *string   `json:"filename,omitempty"`

	// GPG key used to sign packages in this repository. Can be a gpg key or a URL
	Gpgkey     *[]string `json:"gpgkey,omitempty"`
	Id         string    `json:"id"`
	Metalink   *string   `json:"metalink,omitempty"`
	Mirrorlist *string   `json:"mirrorlist,omitempty"`
	Name       *string   `json:"name,omitempty"`
	Priority   *int      `json:"priority,omitempty"`
	SslVerify  *bool     `json:"ssl_verify,omitempty"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	CustomRepositories  *[]CustomRepository `json:"custom_repositories,omitempty"`
	Filesystem          *[]Filesystem       `json:"filesystem,omitempty"`
	Packages            *[]string           `json:"packages,omitempty"`
	PayloadRepositories *[]Repository       `json:"payload_repositories,omitempty"`
	Subscription        *Subscription       `json:"subscription,omitempty"`

	// list of users that a customer can add, also specifying their respective groups and SSH keys
	Users *[]User `json:"users,omitempty"`
}

// DistributionItem defines model for DistributionItem.
type DistributionItem struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// Distributions defines model for Distributions.
type Distributions string

// DistributionsResponse defines model for DistributionsResponse.
type DistributionsResponse = []DistributionItem

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadRequestOptions defines model for GCPUploadRequestOptions.
type GCPUploadRequestOptions struct {
	// List of valid Google accounts to share the imported Compute Node image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	//     If not specified, the imported Compute Node image is not shared with any
	//     account.
	ShareWithAccounts []string `json:"share_with_accounts"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Detail string `json:"detail"`
	Title  string `json:"title"`
}

// HTTPErrorList defines model for HTTPErrorList.
type HTTPErrorList struct {
	Errors []HTTPError `json:"errors"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	// CPU architecture of the image, x86_64 and aarch64 are currently supported.
	Architecture  ImageRequestArchitecture `json:"architecture"`
	ImageType     ImageTypes               `json:"image_type"`
	Ostree        *OSTree                  `json:"ostree,omitempty"`
	UploadRequest UploadRequest            `json:"upload_request"`
}

// CPU architecture of the image, x86_64 and aarch64 are currently supported.
type ImageRequestArchitecture string

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusStatus   `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusStatus defines model for ImageStatus.Status.
type ImageStatusStatus string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// Package defines model for Package.
type Package struct {
	Name    string `json:"name"`
	Summary string `json:"summary"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// PackagesResponse defines model for PackagesResponse.
type PackagesResponse struct {
	Data  []Package `json:"data"`
	Links struct {
		First string `json:"first"`
		Last  string `json:"last"`
	} `json:"links"`
	Meta struct {
		Count int `json:"count"`
	} `json:"meta"`
}

// Readiness defines model for Readiness.
type Readiness struct {
	Readiness string `json:"readiness"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// Enables gpg verification of the repository metadata
	CheckRepoGpg *bool   `json:"check_repo_gpg,omitempty"`
	Gpgkey       *string `json:"gpgkey,omitempty"`
	IgnoreSsl    *bool   `json:"ignore_ssl,omitempty"`
	Metalink     *string `json:"metalink,omitempty"`
	Mirrorlist   *string `json:"mirrorlist,omitempty"`
	Rhsm         bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation-key"`
	BaseUrl       string `json:"base-url"`
	Insights      bool   `json:"insights"`
	Organization  int    `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server-url"`
}

// UploadRequest defines model for UploadRequest.
type UploadRequest struct {
	Options interface{} `json:"options"`
	Type    UploadTypes `json:"type"`
}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}        `json:"options"`
	Status  UploadStatusStatus `json:"status"`
	Type    UploadTypes        `json:"type"`
}

// UploadStatusStatus defines model for UploadStatus.Status.
type UploadStatusStatus string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Name   string `json:"name"`
	SshKey string `json:"ssh_key"`
}

// Version defines model for Version.
type Version struct {
	Version string `json:"version"`
}

// ComposeImageJSONBody defines parameters for ComposeImage.
type ComposeImageJSONBody = ComposeRequest

// GetComposesParams defines parameters for GetComposes.
type GetComposesParams struct {
	// max amount of composes, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// composes page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// CloneComposeJSONBody defines parameters for CloneCompose.
type CloneComposeJSONBody = CloneRequest

// GetComposeClonesParams defines parameters for GetComposeClones.
type GetComposeClonesParams struct {
	// max amount of clones, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// clones page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParams defines parameters for GetPackages.
type GetPackagesParams struct {
	// distribution to look up packages for
	Distribution Distributions `form:"distribution" json:"distribution"`

	// architecture to look up packages for
	Architecture GetPackagesParamsArchitecture `form:"architecture" json:"architecture"`

	// packages to look for
	Search string `form:"search" json:"search"`

	// max amount of packages, default 100
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// packages page offset, default 0
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetPackagesParamsArchitecture defines parameters for GetPackages.
type GetPackagesParamsArchitecture string

// ComposeImageJSONRequestBody defines body for ComposeImage for application/json ContentType.
type ComposeImageJSONRequestBody = ComposeImageJSONBody

// CloneComposeJSONRequestBody defines body for CloneCompose for application/json ContentType.
type CloneComposeJSONRequestBody = CloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// get the architectures and their image types available for a given distribution
	// (GET /architectures/{distribution})
	GetArchitectures(ctx echo.Context, distribution string) error
	// get status of a compose clone
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id openapi_types.UUID) error
	// compose image
	// (POST /compose)
	ComposeImage(ctx echo.Context) error
	// get a collection of previous compose requests for the logged in user
	// (GET /composes)
	GetComposes(ctx echo.Context, params GetComposesParams) error
	// delete a compose
	// (DELETE /composes/{composeId})
	DeleteCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get status of an image compose
	// (GET /composes/{composeId})
	GetComposeStatus(ctx echo.Context, composeId openapi_types.UUID) error
	// clone a compose
	// (POST /composes/{composeId}/clone)
	CloneCompose(ctx echo.Context, composeId openapi_types.UUID) error
	// get clones of a compose
	// (GET /composes/{composeId}/clones)
	GetComposeClones(ctx echo.Context, composeId openapi_types.UUID, params GetComposeClonesParams) error
	// get metadata of an image compose
	// (GET /composes/{composeId}/metadata)
	GetComposeMetadata(ctx echo.Context, composeId openapi_types.UUID) error
	// get the available distributions
	// (GET /distributions)
	GetDistributions(ctx echo.Context) error
	// get the openapi json specification
	// (GET /openapi.json)
	GetOpenapiJson(ctx echo.Context) error

	// (GET /packages)
	GetPackages(ctx echo.Context, params GetPackagesParams) error
	// return the readiness
	// (GET /ready)
	GetReadiness(ctx echo.Context) error
	// get the service version
	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArchitectures converts echo context to params.
func (w *ServerInterfaceWrapper) GetArchitectures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "distribution" -------------
	var distribution string

	err = runtime.BindStyledParameterWithLocation("simple", false, "distribution", runtime.ParamLocationPath, ctx.Param("distribution"), &distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetArchitectures(ctx, distribution)
	return err
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// ComposeImage converts echo context to params.
func (w *ServerInterfaceWrapper) ComposeImage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ComposeImage(ctx)
	return err
}

// GetComposes converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposes(ctx, params)
	return err
}

// DeleteCompose converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCompose(ctx, composeId)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, composeId)
	return err
}

// CloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) CloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CloneCompose(ctx, composeId)
	return err
}

// GetComposeClones converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeClones(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComposeClonesParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeClones(ctx, composeId, params)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "composeId" -------------
	var composeId openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "composeId", runtime.ParamLocationPath, ctx.Param("composeId"), &composeId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter composeId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, composeId)
	return err
}

// GetDistributions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDistributions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDistributions(ctx)
	return err
}

// GetOpenapiJson converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapiJson(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapiJson(ctx)
	return err
}

// GetPackages converts echo context to params.
func (w *ServerInterfaceWrapper) GetPackages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPackagesParams
	// ------------- Required query parameter "distribution" -------------

	err = runtime.BindQueryParameter("form", true, true, "distribution", ctx.QueryParams(), &params.Distribution)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter distribution: %s", err))
	}

	// ------------- Required query parameter "architecture" -------------

	err = runtime.BindQueryParameter("form", true, true, "architecture", ctx.QueryParams(), &params.Architecture)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter architecture: %s", err))
	}

	// ------------- Required query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, true, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPackages(ctx, params)
	return err
}

// GetReadiness converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadiness(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetReadiness(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/architectures/:distribution", wrapper.GetArchitectures)
	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.ComposeImage)
	router.GET(baseURL+"/composes", wrapper.GetComposes)
	router.DELETE(baseURL+"/composes/:composeId", wrapper.DeleteCompose)
	router.GET(baseURL+"/composes/:composeId", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:composeId/clone", wrapper.CloneCompose)
	router.GET(baseURL+"/composes/:composeId/clones", wrapper.GetComposeClones)
	router.GET(baseURL+"/composes/:composeId/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/distributions", wrapper.GetDistributions)
	router.GET(baseURL+"/openapi.json", wrapper.GetOpenapiJson)
	router.GET(baseURL+"/packages", wrapper.GetPackages)
	router.GET(baseURL+"/ready", wrapper.GetReadiness)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZbJQu+d9Vkl9vX39vwAAAP//dk0uOo1eAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
